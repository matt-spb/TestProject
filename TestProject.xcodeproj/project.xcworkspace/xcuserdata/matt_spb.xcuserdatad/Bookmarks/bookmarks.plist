<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>12</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>11</string>
					<key>Timestamp</key>
					<string>727297604.871538</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>TestProject/NetworkManager/NetworkManager.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>final class NetworkManager {
</string>
				<key>leading</key>
				<string>//для практики неплохо бы написать две версии. Одну на комплишн хендлерах, вторую на async/await

</string>
				<key>trailing</key>
				<string>    
    private func fetchData(url: String, completion: @escaping ((Result&lt;Person, ErrorMessage&gt;) -&gt; Void)) {
        guard let url = URL(string: url) else { return }
</string>
			</dict>
			<key>title</key>
			<string>подвязать протокол</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>14</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>13</string>
					<key>Timestamp</key>
					<string>727649390.5253299</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>TestProject/View/ViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    private lazy var nameTextField: UITextField = {
</string>
				<key>leading</key>
				<string>    private let networkManager: NetworkManager? = nil
    
</string>
				<key>trailing</key>
				<string>        let textField = UITextField()
        textField.translatesAutoresizingMaskIntoConstraints = false
        
</string>
			</dict>
			<key>title</key>
			<string>сделать проверку на латинские буквы</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>20</string>
					<key>EndingLineNumber</key>
					<string>11</string>
					<key>StartingColumnNumber</key>
					<string>6</string>
					<key>StartingLineNumber</key>
					<string>11</string>
					<key>Timestamp</key>
					<string>727298181.892956</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>TestProject/NetworkManager/NetworkManager.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>class NetworkM</string>
				<key>leading</key>
				<string>//для практики неплохо бы написать две версии. Одну на комплишн хендлерах, вторую на async/await

final </string>
				<key>trailing</key>
				<string>anager {
    
    private func fetchData(url: String, completion: @escaping ((Result&lt;Person, ErrorMessage&gt;) -&gt; Void)) {
</string>
			</dict>
			<key>title</key>
			<string>сделать обработку всевозможных ошибок</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
